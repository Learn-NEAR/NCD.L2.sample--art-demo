{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Oleksandr Sai\\\\source\\\\repos\\\\OlexandrSai\\\\near--art--demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account2FA = exports.AccountMultisig = exports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst depd_1 = __importDefault(require(\"depd\"));\n\nconst account_1 = require(\"./account\");\n\nconst format_1 = require(\"./utils/format\");\n\nconst key_pair_1 = require(\"./utils/key_pair\");\n\nconst transaction_1 = require(\"./transaction\");\n\nconst web_1 = require(\"./utils/web\");\n\nexports.MULTISIG_STORAGE_KEY = '__multisigRequest';\nexports.MULTISIG_ALLOWANCE = new bn_js_1.default(format_1.parseNearAmount('1')); // TODO: Different gas value for different requests (can reduce gas usage dramatically)\n\nexports.MULTISIG_GAS = new bn_js_1.default('100000000000000');\nexports.MULTISIG_DEPOSIT = new bn_js_1.default('0');\nexports.MULTISIG_CHANGE_METHODS = ['add_request', 'add_request_and_confirm', 'delete_request', 'confirm'];\nexports.MULTISIG_CONFIRM_METHODS = ['confirm']; // in memory request cache for node w/o localStorage\n\nconst storageFallback = {\n  [exports.MULTISIG_STORAGE_KEY]: null\n};\n\nclass AccountMultisig extends account_1.Account {\n  constructor(connection, accountId, options) {\n    super(connection, accountId);\n    this.storage = options.storage;\n    this.onAddRequestResult = options.onAddRequestResult;\n  }\n\n  signAndSendTransactionWithAccount(receiverId, actions) {\n    var _superprop_getSignAndSendTransaction = () => super.signAndSendTransaction,\n        _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _superprop_getSignAndSendTransaction().call(_this, {\n        receiverId,\n        actions\n      });\n    })();\n  }\n\n  signAndSendTransaction(...args) {\n    if (typeof args[0] === 'string') {\n      return this._signAndSendTransaction({\n        receiverId: args[0],\n        actions: args[1]\n      });\n    }\n\n    return this._signAndSendTransaction(args[0]);\n  }\n\n  _signAndSendTransaction({\n    receiverId,\n    actions\n  }) {\n    var _superprop_getSignAndSendTransaction2 = () => super.signAndSendTransaction,\n        _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        accountId\n      } = _this2;\n      const args = Buffer.from(JSON.stringify({\n        request: {\n          receiver_id: receiverId,\n          actions: convertActions(actions, accountId, receiverId)\n        }\n      }));\n      let result;\n\n      try {\n        result = yield _superprop_getSignAndSendTransaction2().call(_this2, {\n          receiverId: accountId,\n          actions: [transaction_1.functionCall('add_request_and_confirm', args, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n        });\n      } catch (e) {\n        if (e.toString().includes('Account has too many active requests. Confirm or delete some')) {\n          yield _this2.deleteUnconfirmedRequests();\n          return yield _this2.signAndSendTransaction(receiverId, actions);\n        }\n\n        throw e;\n      } // TODO: Are following even needed? Seems like it throws on error already\n\n\n      if (!result.status) {\n        throw new Error('Request failed');\n      }\n\n      const status = { ...result.status\n      };\n\n      if (!status.SuccessValue || typeof status.SuccessValue !== 'string') {\n        throw new Error('Request failed');\n      }\n\n      _this2.setRequest({\n        accountId,\n        actions,\n        requestId: parseInt(Buffer.from(status.SuccessValue, 'base64').toString('ascii'), 10)\n      });\n\n      if (_this2.onAddRequestResult) {\n        yield _this2.onAddRequestResult(result);\n      } // NOTE there is no await on purpose to avoid blocking for 2fa\n\n\n      _this2.deleteUnconfirmedRequests();\n\n      return result;\n    })();\n  }\n\n  deleteUnconfirmedRequests() {\n    var _superprop_getSignAndSendTransaction3 = () => super.signAndSendTransaction,\n        _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // TODO: Delete in batch, don't delete unexpired\n      // TODO: Delete in batch, don't delete unexpired (can reduce gas usage dramatically)\n      const request_ids = yield _this3.getRequestIds();\n\n      const {\n        requestId\n      } = _this3.getRequest();\n\n      for (const requestIdToDelete of request_ids) {\n        if (requestIdToDelete == requestId) {\n          continue;\n        }\n\n        try {\n          yield _superprop_getSignAndSendTransaction3().call(_this3, {\n            receiverId: _this3.accountId,\n            actions: [transaction_1.functionCall('delete_request', {\n              request_id: requestIdToDelete\n            }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n          });\n        } catch (e) {\n          console.warn('Attempt to delete an earlier request before 15 minutes failed. Will try again.');\n        }\n      }\n    })();\n  } // helpers\n\n\n  getRequestIds() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // TODO: Read requests from state to allow filtering by expiration time\n      // TODO: https://github.com/near/core-contracts/blob/305d1db4f4f2cf5ce4c1ef3479f7544957381f11/multisig/src/lib.rs#L84\n      return _this4.viewFunction(_this4.accountId, 'list_request_ids');\n    })();\n  }\n\n  getRequest() {\n    if (this.storage) {\n      return JSON.parse(this.storage.getItem(exports.MULTISIG_STORAGE_KEY) || '{}');\n    }\n\n    return storageFallback[exports.MULTISIG_STORAGE_KEY];\n  }\n\n  setRequest(data) {\n    if (this.storage) {\n      return this.storage.setItem(exports.MULTISIG_STORAGE_KEY, JSON.stringify(data));\n    }\n\n    storageFallback[exports.MULTISIG_STORAGE_KEY] = data;\n  }\n\n}\n\nexports.AccountMultisig = AccountMultisig;\n\nclass Account2FA extends AccountMultisig {\n  constructor(connection, accountId, options) {\n    super(connection, accountId, options);\n    this.helperUrl = 'https://helper.testnet.near.org';\n    this.helperUrl = options.helperUrl || this.helperUrl;\n    this.storage = options.storage;\n    this.sendCode = options.sendCode || this.sendCodeDefault;\n    this.getCode = options.getCode || this.getCodeDefault;\n    this.verifyCode = options.verifyCode || this.verifyCodeDefault;\n    this.onConfirmResult = options.onConfirmResult;\n  }\n\n  signAndSendTransaction(...args) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (typeof args[0] === 'string') {\n        const deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n        deprecate('use `Account2FA.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n        return _this5.__signAndSendTransaction({\n          receiverId: args[0],\n          actions: args[1]\n        });\n      } else {\n        return _this5.__signAndSendTransaction(args[0]);\n      }\n    })();\n  }\n\n  __signAndSendTransaction({\n    receiverId,\n    actions\n  }) {\n    var _superprop_getSignAndSendTransaction4 = () => super.signAndSendTransaction,\n        _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _superprop_getSignAndSendTransaction4().call(_this6, {\n        receiverId,\n        actions\n      }); // TODO: Should following override onRequestResult in superclass instead of doing custom signAndSendTransaction?\n\n      yield _this6.sendCode();\n      const result = yield _this6.promptAndVerify();\n\n      if (_this6.onConfirmResult) {\n        yield _this6.onConfirmResult(result);\n      }\n\n      return result;\n    })();\n  } // default helpers for CH deployments of multisig\n\n\n  deployMultisig(contractBytes) {\n    var _superprop_getSignAndSendTransactionWithAccount = () => super.signAndSendTransactionWithAccount,\n        _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        accountId\n      } = _this7;\n      const seedOrLedgerKey = (yield _this7.getRecoveryMethods()).data.filter(({\n        kind,\n        publicKey\n      }) => (kind === 'phrase' || kind === 'ledger') && publicKey !== null).map(rm => rm.publicKey);\n      const fak2lak = (yield _this7.getAccessKeys()).filter(({\n        public_key,\n        access_key: {\n          permission\n        }\n      }) => permission === 'FullAccess' && !seedOrLedgerKey.includes(public_key)).map(ak => ak.public_key).map(toPK);\n      const confirmOnlyKey = toPK((yield _this7.postSignedJson('/2fa/getAccessKey', {\n        accountId\n      })).publicKey);\n      const newArgs = Buffer.from(JSON.stringify({\n        'num_confirmations': 2\n      }));\n      const actions = [...fak2lak.map(pk => transaction_1.deleteKey(pk)), ...fak2lak.map(pk => transaction_1.addKey(pk, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CHANGE_METHODS, null))), transaction_1.addKey(confirmOnlyKey, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CONFIRM_METHODS, null)), transaction_1.deployContract(contractBytes)];\n\n      if ((yield _this7.state()).code_hash === '11111111111111111111111111111111') {\n        actions.push(transaction_1.functionCall('new', newArgs, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT));\n      }\n\n      console.log('deploying multisig contract for', accountId);\n      return yield _superprop_getSignAndSendTransactionWithAccount().call(_this7, accountId, actions);\n    })();\n  }\n\n  disable(contractBytes) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        accountId\n      } = _this8;\n      const accessKeys = yield _this8.getAccessKeys();\n      const lak2fak = accessKeys.filter(({\n        access_key\n      }) => access_key.permission !== 'FullAccess').filter(({\n        access_key\n      }) => {\n        const perm = access_key.permission.FunctionCall;\n        return perm.receiver_id === accountId && perm.method_names.length === 4 && perm.method_names.includes('add_request_and_confirm');\n      });\n      const confirmOnlyKey = key_pair_1.PublicKey.from((yield _this8.postSignedJson('/2fa/getAccessKey', {\n        accountId\n      })).publicKey);\n      const actions = [transaction_1.deleteKey(confirmOnlyKey), ...lak2fak.map(({\n        public_key\n      }) => transaction_1.deleteKey(key_pair_1.PublicKey.from(public_key))), ...lak2fak.map(({\n        public_key\n      }) => transaction_1.addKey(key_pair_1.PublicKey.from(public_key), null)), transaction_1.deployContract(contractBytes)];\n      console.log('disabling 2fa for', accountId);\n      return yield _this8.signAndSendTransaction({\n        receiverId: accountId,\n        actions\n      });\n    })();\n  }\n\n  sendCodeDefault() {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        accountId\n      } = _this9;\n\n      const {\n        requestId\n      } = _this9.getRequest();\n\n      const method = yield _this9.get2faMethod();\n      yield _this9.postSignedJson('/2fa/send', {\n        accountId,\n        method,\n        requestId\n      });\n      return requestId;\n    })();\n  }\n\n  getCodeDefault(method) {\n    return _asyncToGenerator(function* () {\n      throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is \"email\" or \"phone\".');\n    })();\n  }\n\n  promptAndVerify() {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      const method = yield _this10.get2faMethod();\n      const securityCode = yield _this10.getCode(method);\n\n      try {\n        const result = yield _this10.verifyCode(securityCode); // TODO: Parse error from result for real (like in normal account.signAndSendTransaction)\n\n        return result;\n      } catch (e) {\n        console.warn('Error validating security code:', e);\n\n        if (e.toString().includes('invalid 2fa code provided') || e.toString().includes('2fa code not valid')) {\n          return yield _this10.promptAndVerify();\n        }\n\n        throw e;\n      }\n    })();\n  }\n\n  verifyCodeDefault(securityCode) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        accountId\n      } = _this11;\n\n      const request = _this11.getRequest();\n\n      if (!request) {\n        throw new Error('no request pending');\n      }\n\n      const {\n        requestId\n      } = request;\n      return yield _this11.postSignedJson('/2fa/verify', {\n        accountId,\n        securityCode,\n        requestId\n      });\n    })();\n  }\n\n  getRecoveryMethods() {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        accountId\n      } = _this12;\n      return {\n        accountId,\n        data: yield _this12.postSignedJson('/account/recoveryMethods', {\n          accountId\n        })\n      };\n    })();\n  }\n\n  get2faMethod() {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      let {\n        data\n      } = yield _this13.getRecoveryMethods();\n\n      if (data && data.length) {\n        data = data.find(m => m.kind.indexOf('2fa-') === 0);\n      }\n\n      if (!data) return null;\n      const {\n        kind,\n        detail\n      } = data;\n      return {\n        kind,\n        detail\n      };\n    })();\n  }\n\n  signatureFor() {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        accountId\n      } = _this14;\n      const block = yield _this14.connection.provider.block({\n        finality: 'final'\n      });\n      const blockNumber = block.header.height.toString();\n      const signed = yield _this14.connection.signer.signMessage(Buffer.from(blockNumber), accountId, _this14.connection.networkId);\n      const blockNumberSignature = Buffer.from(signed.signature).toString('base64');\n      return {\n        blockNumber,\n        blockNumberSignature\n      };\n    })();\n  }\n\n  postSignedJson(path, body) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield web_1.fetchJson(_this15.helperUrl + path, JSON.stringify({ ...body,\n        ...(yield _this15.signatureFor())\n      }));\n    })();\n  }\n\n}\n\nexports.Account2FA = Account2FA; // helpers\n\nconst toPK = pk => key_pair_1.PublicKey.from(pk);\n\nconst convertPKForContract = pk => pk.toString().replace('ed25519:', '');\n\nconst convertActions = (actions, accountId, receiverId) => actions.map(a => {\n  const type = a.enum;\n  const {\n    gas,\n    publicKey,\n    methodName,\n    args,\n    deposit,\n    accessKey,\n    code\n  } = a[type];\n  const action = {\n    type: type[0].toUpperCase() + type.substr(1),\n    gas: gas && gas.toString() || undefined,\n    public_key: publicKey && convertPKForContract(publicKey) || undefined,\n    method_name: methodName,\n    args: args && Buffer.from(args).toString('base64') || undefined,\n    code: code && Buffer.from(code).toString('base64') || undefined,\n    amount: deposit && deposit.toString() || undefined,\n    deposit: deposit && deposit.toString() || '0',\n    permission: undefined\n  };\n\n  if (accessKey) {\n    if (receiverId === accountId && accessKey.permission.enum !== 'fullAccess') {\n      action.permission = {\n        receiver_id: accountId,\n        allowance: exports.MULTISIG_ALLOWANCE.toString(),\n        method_names: exports.MULTISIG_CHANGE_METHODS\n      };\n    }\n\n    if (accessKey.permission.enum === 'functionCall') {\n      const {\n        receiverId: receiver_id,\n        methodNames: method_names,\n        allowance\n      } = accessKey.permission.functionCall;\n      action.permission = {\n        receiver_id,\n        allowance: allowance && allowance.toString() || undefined,\n        method_names\n      };\n    }\n  }\n\n  return action;\n});","map":{"version":3,"sources":["C:/Users/Oleksandr Sai/source/repos/OlexandrSai/near--art--demo/node_modules/near-api-js/lib/account_multisig.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Account2FA","AccountMultisig","MULTISIG_CONFIRM_METHODS","MULTISIG_CHANGE_METHODS","MULTISIG_DEPOSIT","MULTISIG_GAS","MULTISIG_ALLOWANCE","MULTISIG_STORAGE_KEY","bn_js_1","require","depd_1","account_1","format_1","key_pair_1","transaction_1","web_1","default","parseNearAmount","storageFallback","Account","constructor","connection","accountId","options","storage","onAddRequestResult","signAndSendTransactionWithAccount","receiverId","actions","signAndSendTransaction","args","_signAndSendTransaction","Buffer","from","JSON","stringify","request","receiver_id","convertActions","result","functionCall","e","toString","includes","deleteUnconfirmedRequests","status","Error","SuccessValue","setRequest","requestId","parseInt","request_ids","getRequestIds","getRequest","requestIdToDelete","request_id","console","warn","viewFunction","parse","getItem","data","setItem","helperUrl","sendCode","sendCodeDefault","getCode","getCodeDefault","verifyCode","verifyCodeDefault","onConfirmResult","deprecate","__signAndSendTransaction","promptAndVerify","deployMultisig","contractBytes","seedOrLedgerKey","getRecoveryMethods","filter","kind","publicKey","map","rm","fak2lak","getAccessKeys","public_key","access_key","permission","ak","toPK","confirmOnlyKey","postSignedJson","newArgs","pk","deleteKey","addKey","functionCallAccessKey","deployContract","state","code_hash","push","log","disable","accessKeys","lak2fak","perm","FunctionCall","method_names","length","PublicKey","method","get2faMethod","securityCode","find","m","indexOf","detail","signatureFor","block","provider","finality","blockNumber","header","height","signed","signer","signMessage","networkId","blockNumberSignature","signature","path","body","fetchJson","convertPKForContract","replace","a","type","enum","gas","methodName","deposit","accessKey","code","action","toUpperCase","substr","undefined","method_name","amount","allowance","methodNames"],"mappings":"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","sourcesContent":["'use strict';\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account2FA = exports.AccountMultisig = exports.MULTISIG_CONFIRM_METHODS = exports.MULTISIG_CHANGE_METHODS = exports.MULTISIG_DEPOSIT = exports.MULTISIG_GAS = exports.MULTISIG_ALLOWANCE = exports.MULTISIG_STORAGE_KEY = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst depd_1 = __importDefault(require(\"depd\"));\nconst account_1 = require(\"./account\");\nconst format_1 = require(\"./utils/format\");\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst transaction_1 = require(\"./transaction\");\nconst web_1 = require(\"./utils/web\");\nexports.MULTISIG_STORAGE_KEY = '__multisigRequest';\nexports.MULTISIG_ALLOWANCE = new bn_js_1.default(format_1.parseNearAmount('1'));\n// TODO: Different gas value for different requests (can reduce gas usage dramatically)\nexports.MULTISIG_GAS = new bn_js_1.default('100000000000000');\nexports.MULTISIG_DEPOSIT = new bn_js_1.default('0');\nexports.MULTISIG_CHANGE_METHODS = ['add_request', 'add_request_and_confirm', 'delete_request', 'confirm'];\nexports.MULTISIG_CONFIRM_METHODS = ['confirm'];\n// in memory request cache for node w/o localStorage\nconst storageFallback = {\n    [exports.MULTISIG_STORAGE_KEY]: null\n};\nclass AccountMultisig extends account_1.Account {\n    constructor(connection, accountId, options) {\n        super(connection, accountId);\n        this.storage = options.storage;\n        this.onAddRequestResult = options.onAddRequestResult;\n    }\n    async signAndSendTransactionWithAccount(receiverId, actions) {\n        return super.signAndSendTransaction({ receiverId, actions });\n    }\n    signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            return this._signAndSendTransaction({ receiverId: args[0], actions: args[1] });\n        }\n        return this._signAndSendTransaction(args[0]);\n    }\n    async _signAndSendTransaction({ receiverId, actions }) {\n        const { accountId } = this;\n        const args = Buffer.from(JSON.stringify({\n            request: {\n                receiver_id: receiverId,\n                actions: convertActions(actions, accountId, receiverId)\n            }\n        }));\n        let result;\n        try {\n            result = await super.signAndSendTransaction({\n                receiverId: accountId,\n                actions: [\n                    transaction_1.functionCall('add_request_and_confirm', args, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)\n                ]\n            });\n        }\n        catch (e) {\n            if (e.toString().includes('Account has too many active requests. Confirm or delete some')) {\n                await this.deleteUnconfirmedRequests();\n                return await this.signAndSendTransaction(receiverId, actions);\n            }\n            throw e;\n        }\n        // TODO: Are following even needed? Seems like it throws on error already\n        if (!result.status) {\n            throw new Error('Request failed');\n        }\n        const status = { ...result.status };\n        if (!status.SuccessValue || typeof status.SuccessValue !== 'string') {\n            throw new Error('Request failed');\n        }\n        this.setRequest({\n            accountId,\n            actions,\n            requestId: parseInt(Buffer.from(status.SuccessValue, 'base64').toString('ascii'), 10)\n        });\n        if (this.onAddRequestResult) {\n            await this.onAddRequestResult(result);\n        }\n        // NOTE there is no await on purpose to avoid blocking for 2fa\n        this.deleteUnconfirmedRequests();\n        return result;\n    }\n    async deleteUnconfirmedRequests() {\n        // TODO: Delete in batch, don't delete unexpired\n        // TODO: Delete in batch, don't delete unexpired (can reduce gas usage dramatically)\n        const request_ids = await this.getRequestIds();\n        const { requestId } = this.getRequest();\n        for (const requestIdToDelete of request_ids) {\n            if (requestIdToDelete == requestId) {\n                continue;\n            }\n            try {\n                await super.signAndSendTransaction({\n                    receiverId: this.accountId,\n                    actions: [transaction_1.functionCall('delete_request', { request_id: requestIdToDelete }, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT)]\n                });\n            }\n            catch (e) {\n                console.warn('Attempt to delete an earlier request before 15 minutes failed. Will try again.');\n            }\n        }\n    }\n    // helpers\n    async getRequestIds() {\n        // TODO: Read requests from state to allow filtering by expiration time\n        // TODO: https://github.com/near/core-contracts/blob/305d1db4f4f2cf5ce4c1ef3479f7544957381f11/multisig/src/lib.rs#L84\n        return this.viewFunction(this.accountId, 'list_request_ids');\n    }\n    getRequest() {\n        if (this.storage) {\n            return JSON.parse(this.storage.getItem(exports.MULTISIG_STORAGE_KEY) || '{}');\n        }\n        return storageFallback[exports.MULTISIG_STORAGE_KEY];\n    }\n    setRequest(data) {\n        if (this.storage) {\n            return this.storage.setItem(exports.MULTISIG_STORAGE_KEY, JSON.stringify(data));\n        }\n        storageFallback[exports.MULTISIG_STORAGE_KEY] = data;\n    }\n}\nexports.AccountMultisig = AccountMultisig;\nclass Account2FA extends AccountMultisig {\n    constructor(connection, accountId, options) {\n        super(connection, accountId, options);\n        this.helperUrl = 'https://helper.testnet.near.org';\n        this.helperUrl = options.helperUrl || this.helperUrl;\n        this.storage = options.storage;\n        this.sendCode = options.sendCode || this.sendCodeDefault;\n        this.getCode = options.getCode || this.getCodeDefault;\n        this.verifyCode = options.verifyCode || this.verifyCodeDefault;\n        this.onConfirmResult = options.onConfirmResult;\n    }\n    async signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            const deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n            deprecate('use `Account2FA.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n            return this.__signAndSendTransaction({ receiverId: args[0], actions: args[1] });\n        }\n        else {\n            return this.__signAndSendTransaction(args[0]);\n        }\n    }\n    async __signAndSendTransaction({ receiverId, actions }) {\n        await super.signAndSendTransaction({ receiverId, actions });\n        // TODO: Should following override onRequestResult in superclass instead of doing custom signAndSendTransaction?\n        await this.sendCode();\n        const result = await this.promptAndVerify();\n        if (this.onConfirmResult) {\n            await this.onConfirmResult(result);\n        }\n        return result;\n    }\n    // default helpers for CH deployments of multisig\n    async deployMultisig(contractBytes) {\n        const { accountId } = this;\n        const seedOrLedgerKey = (await this.getRecoveryMethods()).data\n            .filter(({ kind, publicKey }) => (kind === 'phrase' || kind === 'ledger') && publicKey !== null)\n            .map((rm) => rm.publicKey);\n        const fak2lak = (await this.getAccessKeys())\n            .filter(({ public_key, access_key: { permission } }) => permission === 'FullAccess' && !seedOrLedgerKey.includes(public_key))\n            .map((ak) => ak.public_key)\n            .map(toPK);\n        const confirmOnlyKey = toPK((await this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n        const newArgs = Buffer.from(JSON.stringify({ 'num_confirmations': 2 }));\n        const actions = [\n            ...fak2lak.map((pk) => transaction_1.deleteKey(pk)),\n            ...fak2lak.map((pk) => transaction_1.addKey(pk, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CHANGE_METHODS, null))),\n            transaction_1.addKey(confirmOnlyKey, transaction_1.functionCallAccessKey(accountId, exports.MULTISIG_CONFIRM_METHODS, null)),\n            transaction_1.deployContract(contractBytes),\n        ];\n        if ((await this.state()).code_hash === '11111111111111111111111111111111') {\n            actions.push(transaction_1.functionCall('new', newArgs, exports.MULTISIG_GAS, exports.MULTISIG_DEPOSIT));\n        }\n        console.log('deploying multisig contract for', accountId);\n        return await super.signAndSendTransactionWithAccount(accountId, actions);\n    }\n    async disable(contractBytes) {\n        const { accountId } = this;\n        const accessKeys = await this.getAccessKeys();\n        const lak2fak = accessKeys\n            .filter(({ access_key }) => access_key.permission !== 'FullAccess')\n            .filter(({ access_key }) => {\n            const perm = access_key.permission.FunctionCall;\n            return perm.receiver_id === accountId &&\n                perm.method_names.length === 4 &&\n                perm.method_names.includes('add_request_and_confirm');\n        });\n        const confirmOnlyKey = key_pair_1.PublicKey.from((await this.postSignedJson('/2fa/getAccessKey', { accountId })).publicKey);\n        const actions = [\n            transaction_1.deleteKey(confirmOnlyKey),\n            ...lak2fak.map(({ public_key }) => transaction_1.deleteKey(key_pair_1.PublicKey.from(public_key))),\n            ...lak2fak.map(({ public_key }) => transaction_1.addKey(key_pair_1.PublicKey.from(public_key), null)),\n            transaction_1.deployContract(contractBytes),\n        ];\n        console.log('disabling 2fa for', accountId);\n        return await this.signAndSendTransaction({\n            receiverId: accountId,\n            actions\n        });\n    }\n    async sendCodeDefault() {\n        const { accountId } = this;\n        const { requestId } = this.getRequest();\n        const method = await this.get2faMethod();\n        await this.postSignedJson('/2fa/send', {\n            accountId,\n            method,\n            requestId,\n        });\n        return requestId;\n    }\n    async getCodeDefault(method) {\n        throw new Error('There is no getCode callback provided. Please provide your own in AccountMultisig constructor options. It has a parameter method where method.kind is \"email\" or \"phone\".');\n    }\n    async promptAndVerify() {\n        const method = await this.get2faMethod();\n        const securityCode = await this.getCode(method);\n        try {\n            const result = await this.verifyCode(securityCode);\n            // TODO: Parse error from result for real (like in normal account.signAndSendTransaction)\n            return result;\n        }\n        catch (e) {\n            console.warn('Error validating security code:', e);\n            if (e.toString().includes('invalid 2fa code provided') || e.toString().includes('2fa code not valid')) {\n                return await this.promptAndVerify();\n            }\n            throw e;\n        }\n    }\n    async verifyCodeDefault(securityCode) {\n        const { accountId } = this;\n        const request = this.getRequest();\n        if (!request) {\n            throw new Error('no request pending');\n        }\n        const { requestId } = request;\n        return await this.postSignedJson('/2fa/verify', {\n            accountId,\n            securityCode,\n            requestId\n        });\n    }\n    async getRecoveryMethods() {\n        const { accountId } = this;\n        return {\n            accountId,\n            data: await this.postSignedJson('/account/recoveryMethods', { accountId })\n        };\n    }\n    async get2faMethod() {\n        let { data } = await this.getRecoveryMethods();\n        if (data && data.length) {\n            data = data.find((m) => m.kind.indexOf('2fa-') === 0);\n        }\n        if (!data)\n            return null;\n        const { kind, detail } = data;\n        return { kind, detail };\n    }\n    async signatureFor() {\n        const { accountId } = this;\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockNumber = block.header.height.toString();\n        const signed = await this.connection.signer.signMessage(Buffer.from(blockNumber), accountId, this.connection.networkId);\n        const blockNumberSignature = Buffer.from(signed.signature).toString('base64');\n        return { blockNumber, blockNumberSignature };\n    }\n    async postSignedJson(path, body) {\n        return await web_1.fetchJson(this.helperUrl + path, JSON.stringify({\n            ...body,\n            ...(await this.signatureFor())\n        }));\n    }\n}\nexports.Account2FA = Account2FA;\n// helpers\nconst toPK = (pk) => key_pair_1.PublicKey.from(pk);\nconst convertPKForContract = (pk) => pk.toString().replace('ed25519:', '');\nconst convertActions = (actions, accountId, receiverId) => actions.map((a) => {\n    const type = a.enum;\n    const { gas, publicKey, methodName, args, deposit, accessKey, code } = a[type];\n    const action = {\n        type: type[0].toUpperCase() + type.substr(1),\n        gas: (gas && gas.toString()) || undefined,\n        public_key: (publicKey && convertPKForContract(publicKey)) || undefined,\n        method_name: methodName,\n        args: (args && Buffer.from(args).toString('base64')) || undefined,\n        code: (code && Buffer.from(code).toString('base64')) || undefined,\n        amount: (deposit && deposit.toString()) || undefined,\n        deposit: (deposit && deposit.toString()) || '0',\n        permission: undefined,\n    };\n    if (accessKey) {\n        if (receiverId === accountId && accessKey.permission.enum !== 'fullAccess') {\n            action.permission = {\n                receiver_id: accountId,\n                allowance: exports.MULTISIG_ALLOWANCE.toString(),\n                method_names: exports.MULTISIG_CHANGE_METHODS,\n            };\n        }\n        if (accessKey.permission.enum === 'functionCall') {\n            const { receiverId: receiver_id, methodNames: method_names, allowance } = accessKey.permission.functionCall;\n            action.permission = {\n                receiver_id,\n                allowance: (allowance && allowance.toString()) || undefined,\n                method_names\n            };\n        }\n    }\n    return action;\n});\n"]},"metadata":{},"sourceType":"script"}