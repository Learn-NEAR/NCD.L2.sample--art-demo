{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Oleksandr Sai\\\\source\\\\repos\\\\OlexandrSai\\\\near--art--demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst depd_1 = __importDefault(require(\"depd\"));\n\nconst transaction_1 = require(\"./transaction\");\n\nconst providers_1 = require(\"./providers\");\n\nconst borsh_1 = require(\"borsh\");\n\nconst key_pair_1 = require(\"./utils/key_pair\");\n\nconst errors_1 = require(\"./utils/errors\");\n\nconst rpc_errors_1 = require(\"./utils/rpc_errors\");\n\nconst constants_1 = require(\"./constants\");\n\nconst exponential_backoff_1 = __importDefault(require(\"./utils/exponential-backoff\")); // Default number of retries with different nonce before giving up on a transaction.\n\n\nconst TX_NONCE_RETRY_NUMBER = 12; // Default wait until next retry in millis.\n\nconst TX_NONCE_RETRY_WAIT = 500; // Exponential back off for waiting to retry.\n\nconst TX_NONCE_RETRY_WAIT_BACKOFF = 1.5;\n\nfunction parseJsonFromRawResponse(response) {\n  return JSON.parse(Buffer.from(response).toString());\n}\n\nfunction bytesJsonStringify(input) {\n  return Buffer.from(JSON.stringify(input));\n}\n/**\n * This class provides common account related RPC calls including signing transactions with a {@link KeyPair}.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#account}\n * @hint Use {@link WalletConnection} in the browser to redirect to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for Account/key management using the {@link BrowserLocalStorageKeyStore}.\n * @see {@link https://nomicon.io/DataStructures/Account.html | Account Spec}\n */\n\n\nclass Account {\n  constructor(connection, accountId) {\n    /** @hidden */\n    this.accessKeyByPublicKeyCache = {};\n    this.connection = connection;\n    this.accountId = accountId;\n  }\n  /** @hidden */\n\n\n  get ready() {\n    const deprecate = depd_1.default('Account.ready()');\n    deprecate('not needed anymore, always ready');\n    return Promise.resolve();\n  }\n\n  fetchState() {\n    return _asyncToGenerator(function* () {\n      const deprecate = depd_1.default('Account.fetchState()');\n      deprecate('use `Account.state()` instead');\n    })();\n  }\n  /**\n   * Returns basic NEAR account information via the `view_account` RPC query method\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-account}\n   */\n\n\n  state() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.connection.provider.query({\n        request_type: 'view_account',\n        account_id: _this.accountId,\n        finality: 'optimistic'\n      });\n    })();\n  }\n  /** @hidden */\n\n\n  printLogsAndFailures(contractId, results) {\n    if (!process.env[\"NEAR_NO_LOGS\"]) {\n      for (const result of results) {\n        console.log(`Receipt${result.receiptIds.length > 1 ? 's' : ''}: ${result.receiptIds.join(', ')}`);\n        this.printLogs(contractId, result.logs, '\\t');\n\n        if (result.failure) {\n          console.warn(`\\tFailure [${contractId}]: ${result.failure}`);\n        }\n      }\n    }\n  }\n  /** @hidden */\n\n\n  printLogs(contractId, logs, prefix = '') {\n    if (!process.env[\"NEAR_NO_LOGS\"]) {\n      for (const log of logs) {\n        console.log(`${prefix}Log [${contractId}]: ${log}`);\n      }\n    }\n  }\n  /**\n   * Create a signed transaction which can be broadcast to the network\n   * @param receiverId NEAR account receiving the transaction\n   * @param actions list of actions to perform as part of the transaction\n   * @see {@link JsonRpcProvider.sendTransaction}\n   */\n\n\n  signTransaction(receiverId, actions) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const accessKeyInfo = yield _this2.findAccessKey(receiverId, actions);\n\n      if (!accessKeyInfo) {\n        throw new providers_1.TypedError(`Can not sign transactions for account ${_this2.accountId} on network ${_this2.connection.networkId}, no matching key pair found in ${_this2.connection.signer}.`, 'KeyNotFound');\n      }\n\n      const {\n        accessKey\n      } = accessKeyInfo;\n      const block = yield _this2.connection.provider.block({\n        finality: 'final'\n      });\n      const blockHash = block.header.hash;\n      const nonce = ++accessKey.nonce;\n      return yield transaction_1.signTransaction(receiverId, nonce, actions, borsh_1.baseDecode(blockHash), _this2.connection.signer, _this2.accountId, _this2.connection.networkId);\n    })();\n  }\n\n  signAndSendTransaction(...args) {\n    if (typeof args[0] === 'string') {\n      return this.signAndSendTransactionV1(args[0], args[1]);\n    } else {\n      return this.signAndSendTransactionV2(args[0]);\n    }\n  }\n\n  signAndSendTransactionV1(receiverId, actions) {\n    const deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n    deprecate('use `Account.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n    return this.signAndSendTransactionV2({\n      receiverId,\n      actions\n    });\n  }\n\n  signAndSendTransactionV2({\n    receiverId,\n    actions,\n    returnError\n  }) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let txHash, signedTx; // TODO: TX_NONCE (different constants for different uses of exponentialBackoff?)\n\n      const result = yield exponential_backoff_1.default(TX_NONCE_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_NONCE_RETRY_WAIT_BACKOFF, /*#__PURE__*/_asyncToGenerator(function* () {\n        [txHash, signedTx] = yield _this3.signTransaction(receiverId, actions);\n        const publicKey = signedTx.transaction.publicKey;\n\n        try {\n          return yield _this3.connection.provider.sendTransaction(signedTx);\n        } catch (error) {\n          if (error.type === 'InvalidNonce') {\n            errors_1.logWarning(`Retrying transaction ${receiverId}:${borsh_1.baseEncode(txHash)} with new nonce.`);\n            delete _this3.accessKeyByPublicKeyCache[publicKey.toString()];\n            return null;\n          }\n\n          if (error.type === 'Expired') {\n            errors_1.logWarning(`Retrying transaction ${receiverId}:${borsh_1.baseEncode(txHash)} due to expired block hash`);\n            return null;\n          }\n\n          error.context = new providers_1.ErrorContext(borsh_1.baseEncode(txHash));\n          throw error;\n        }\n      }));\n\n      if (!result) {\n        // TODO: This should have different code actually, as means \"transaction not submitted for sure\"\n        throw new providers_1.TypedError('nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.', 'RetriesExceeded');\n      }\n\n      const flatLogs = [result.transaction_outcome, ...result.receipts_outcome].reduce((acc, it) => {\n        if (it.outcome.logs.length || typeof it.outcome.status === 'object' && typeof it.outcome.status.Failure === 'object') {\n          return acc.concat({\n            'receiptIds': it.outcome.receipt_ids,\n            'logs': it.outcome.logs,\n            'failure': typeof it.outcome.status.Failure != 'undefined' ? rpc_errors_1.parseRpcError(it.outcome.status.Failure) : null\n          });\n        } else return acc;\n      }, []);\n\n      _this3.printLogsAndFailures(signedTx.transaction.receiverId, flatLogs);\n\n      if (!returnError && typeof result.status === 'object' && typeof result.status.Failure === 'object') {\n        // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n        if (result.status.Failure.error_message && result.status.Failure.error_type) {\n          throw new providers_1.TypedError(`Transaction ${result.transaction_outcome.id} failed. ${result.status.Failure.error_message}`, result.status.Failure.error_type);\n        } else {\n          throw rpc_errors_1.parseResultError(result);\n        }\n      } // TODO: if Tx is Unknown or Started.\n\n\n      return result;\n    })();\n  }\n  /**\n   * Finds the {@link AccessKeyView} associated with the accounts {@link PublicKey} stored in the {@link KeyStore}.\n   *\n   * @todo Find matching access key based on transaction (i.e. receiverId and actions)\n   *\n   * @param receiverId currently unused (see todo)\n   * @param actions currently unused (see todo)\n   * @returns `{ publicKey PublicKey; accessKey: AccessKeyView }`\n   */\n\n\n  findAccessKey(receiverId, actions) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // TODO: Find matching access key based on transaction (i.e. receiverId and actions)\n      const publicKey = yield _this4.connection.signer.getPublicKey(_this4.accountId, _this4.connection.networkId);\n\n      if (!publicKey) {\n        return null;\n      }\n\n      const cachedAccessKey = _this4.accessKeyByPublicKeyCache[publicKey.toString()];\n\n      if (cachedAccessKey !== undefined) {\n        return {\n          publicKey,\n          accessKey: cachedAccessKey\n        };\n      }\n\n      try {\n        const accessKey = yield _this4.connection.provider.query({\n          request_type: 'view_access_key',\n          account_id: _this4.accountId,\n          public_key: publicKey.toString(),\n          finality: 'optimistic'\n        }); // this function can be called multiple times and retrieve the same access key\n        // this checks to see if the access key was already retrieved and cached while\n        // the above network call was in flight. To keep nonce values in line, we return\n        // the cached access key.\n\n        if (_this4.accessKeyByPublicKeyCache[publicKey.toString()]) {\n          return {\n            publicKey,\n            accessKey: _this4.accessKeyByPublicKeyCache[publicKey.toString()]\n          };\n        }\n\n        _this4.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;\n        return {\n          publicKey,\n          accessKey\n        };\n      } catch (e) {\n        if (e.type == 'AccessKeyDoesNotExist') {\n          return null;\n        }\n\n        throw e;\n      }\n    })();\n  }\n  /**\n   * Create a new account and deploy a contract to it\n   *\n   * @param contractId NEAR account where the contract is deployed\n   * @param publicKey The public key to add to the created contract account\n   * @param data The compiled contract code\n   * @param amount of NEAR to transfer to the created contract account. Transfer enough to pay for storage https://docs.near.org/docs/concepts/storage-staking\n   */\n\n\n  createAndDeployContract(contractId, publicKey, data, amount) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const accessKey = transaction_1.fullAccessKey();\n      yield _this5.signAndSendTransaction({\n        receiverId: contractId,\n        actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey), transaction_1.deployContract(data)]\n      });\n      const contractAccount = new Account(_this5.connection, contractId);\n      return contractAccount;\n    })();\n  }\n  /**\n   * @param receiverId NEAR account receiving Ⓝ\n   * @param amount Amount to send in yoctoⓃ\n   */\n\n\n  sendMoney(receiverId, amount) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this6.signAndSendTransaction({\n        receiverId,\n        actions: [transaction_1.transfer(amount)]\n      });\n    })();\n  }\n  /**\n   * @param newAccountId NEAR account name to be created\n   * @param publicKey A public key created from the masterAccount\n   */\n\n\n  createAccount(newAccountId, publicKey, amount) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const accessKey = transaction_1.fullAccessKey();\n      return _this7.signAndSendTransaction({\n        receiverId: newAccountId,\n        actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n      });\n    })();\n  }\n  /**\n   * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted\n   */\n\n\n  deleteAccount(beneficiaryId) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this8.signAndSendTransaction({\n        receiverId: _this8.accountId,\n        actions: [transaction_1.deleteAccount(beneficiaryId)]\n      });\n    })();\n  }\n  /**\n   * @param data The compiled contract code\n   */\n\n\n  deployContract(data) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this9.signAndSendTransaction({\n        receiverId: _this9.accountId,\n        actions: [transaction_1.deployContract(data)]\n      });\n    })();\n  }\n\n  functionCall(...args) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      if (typeof args[0] === 'string') {\n        return _this10.functionCallV1(args[0], args[1], args[2], args[3], args[4]);\n      } else {\n        return _this10.functionCallV2(args[0]);\n      }\n    })();\n  }\n\n  functionCallV1(contractId, methodName, args, gas, amount) {\n    const deprecate = depd_1.default('Account.functionCall(contractId, methodName, args, gas, amount)');\n    deprecate('use `Account.functionCall(FunctionCallOptions)` instead');\n    args = args || {};\n    this.validateArgs(args);\n    return this.signAndSendTransaction({\n      receiverId: contractId,\n      actions: [transaction_1.functionCall(methodName, args, gas || constants_1.DEFAULT_FUNCTION_CALL_GAS, amount)]\n    });\n  }\n\n  functionCallV2({\n    contractId,\n    methodName,\n    args = {},\n    gas = constants_1.DEFAULT_FUNCTION_CALL_GAS,\n    attachedDeposit,\n    walletMeta,\n    walletCallbackUrl,\n    stringify\n  }) {\n    this.validateArgs(args);\n    const stringifyArg = stringify === undefined ? transaction_1.stringifyJsonOrBytes : stringify;\n    return this.signAndSendTransaction({\n      receiverId: contractId,\n      actions: [transaction_1.functionCall(methodName, args, gas, attachedDeposit, stringifyArg)],\n      walletMeta,\n      walletCallbackUrl\n    });\n  }\n  /**\n   * @see {@link https://docs.near.org/docs/concepts/account#access-keys}\n   * @todo expand this API to support more options.\n   * @param publicKey A public key to be associated with the contract\n   * @param contractId NEAR account where the contract is deployed\n   * @param methodNames The method names on the contract that should be allowed to be called. Pass null for no method names and '' or [] for any method names.\n   * @param amount Payment in yoctoⓃ that is sent to the contract during this function call\n   */\n\n\n  addKey(publicKey, contractId, methodNames, amount) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!methodNames) {\n        methodNames = [];\n      }\n\n      if (!Array.isArray(methodNames)) {\n        methodNames = [methodNames];\n      }\n\n      let accessKey;\n\n      if (!contractId) {\n        accessKey = transaction_1.fullAccessKey();\n      } else {\n        accessKey = transaction_1.functionCallAccessKey(contractId, methodNames, amount);\n      }\n\n      return _this11.signAndSendTransaction({\n        receiverId: _this11.accountId,\n        actions: [transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n      });\n    })();\n  }\n  /**\n   * @param publicKey The public key to be deleted\n   * @returns {Promise<FinalExecutionOutcome>}\n   */\n\n\n  deleteKey(publicKey) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this12.signAndSendTransaction({\n        receiverId: _this12.accountId,\n        actions: [transaction_1.deleteKey(key_pair_1.PublicKey.from(publicKey))]\n      });\n    })();\n  }\n  /**\n   * @see {@link https://docs.near.org/docs/validator/staking-overview}\n   *\n   * @param publicKey The public key for the account that's staking\n   * @param amount The account to stake in yoctoⓃ\n   */\n\n\n  stake(publicKey, amount) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this13.signAndSendTransaction({\n        receiverId: _this13.accountId,\n        actions: [transaction_1.stake(amount, key_pair_1.PublicKey.from(publicKey))]\n      });\n    })();\n  }\n  /** @hidden */\n\n\n  validateArgs(args) {\n    const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;\n\n    if (isUint8Array) {\n      return;\n    }\n\n    if (Array.isArray(args) || typeof args !== 'object') {\n      throw new errors_1.PositionalArgsError();\n    }\n  }\n  /**\n   * Invoke a contract view function using the RPC API.\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#call-a-contract-function}\n   *\n   * @param contractId NEAR account where the contract is deployed\n   * @param methodName The view-only method (no state mutations) name on the contract as it is written in the contract code\n   * @param args Any arguments to the view contract method, wrapped in JSON\n   * @param options.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.\n   * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON.\n   * @returns {Promise<any>}\n   */\n\n\n  viewFunction(contractId, methodName, args = {}, {\n    parse = parseJsonFromRawResponse,\n    stringify = bytesJsonStringify\n  } = {}) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      _this14.validateArgs(args);\n\n      const serializedArgs = stringify(args).toString('base64');\n      const result = yield _this14.connection.provider.query({\n        request_type: 'call_function',\n        account_id: contractId,\n        method_name: methodName,\n        args_base64: serializedArgs,\n        finality: 'optimistic'\n      });\n\n      if (result.logs) {\n        _this14.printLogs(contractId, result.logs);\n      }\n\n      return result.result && result.result.length > 0 && parse(Buffer.from(result.result));\n    })();\n  }\n  /**\n   * Returns the state (key value pairs) of this account's contract based on the key prefix.\n   * Pass an empty string for prefix if you would like to return the entire state.\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-contract-state}\n   *\n   * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.\n   * @param blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n   */\n\n\n  viewState(prefix, blockQuery = {\n    finality: 'optimistic'\n  }) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        values\n      } = yield _this15.connection.provider.query({\n        request_type: 'view_state',\n        ...blockQuery,\n        account_id: _this15.accountId,\n        prefix_base64: Buffer.from(prefix).toString('base64')\n      });\n      return values.map(({\n        key,\n        value\n      }) => ({\n        key: Buffer.from(key, 'base64'),\n        value: Buffer.from(value, 'base64')\n      }));\n    })();\n  }\n  /**\n   * Get all access keys for the account\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-access-key-list}\n   */\n\n\n  getAccessKeys() {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield _this16.connection.provider.query({\n        request_type: 'view_access_key_list',\n        account_id: _this16.accountId,\n        finality: 'optimistic'\n      }); // A breaking API change introduced extra information into the\n      // response, so it now returns an object with a `keys` field instead\n      // of an array: https://github.com/nearprotocol/nearcore/pull/1789\n\n      if (Array.isArray(response)) {\n        return response;\n      }\n\n      return response.keys;\n    })();\n  }\n  /**\n   * Returns a list of authorized apps\n   * @todo update the response value to return all the different keys, not just app keys.\n   */\n\n\n  getAccountDetails() {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      // TODO: update the response value to return all the different keys, not just app keys.\n      // Also if we need this function, or getAccessKeys is good enough.\n      const accessKeys = yield _this17.getAccessKeys();\n      const authorizedApps = accessKeys.filter(item => item.access_key.permission !== 'FullAccess').map(item => {\n        const perm = item.access_key.permission;\n        return {\n          contractId: perm.FunctionCall.receiver_id,\n          amount: perm.FunctionCall.allowance,\n          publicKey: item.public_key\n        };\n      });\n      return {\n        authorizedApps\n      };\n    })();\n  }\n  /**\n   * Returns calculated account balance\n   */\n\n\n  getAccountBalance() {\n    var _this18 = this;\n\n    return _asyncToGenerator(function* () {\n      const protocolConfig = yield _this18.connection.provider.experimental_protocolConfig({\n        finality: 'final'\n      });\n      const state = yield _this18.state();\n      const costPerByte = new bn_js_1.default(protocolConfig.runtime_config.storage_amount_per_byte);\n      const stateStaked = new bn_js_1.default(state.storage_usage).mul(costPerByte);\n      const staked = new bn_js_1.default(state.locked);\n      const totalBalance = new bn_js_1.default(state.amount).add(staked);\n      const availableBalance = totalBalance.sub(bn_js_1.default.max(staked, stateStaked));\n      return {\n        total: totalBalance.toString(),\n        stateStaked: stateStaked.toString(),\n        staked: staked.toString(),\n        available: availableBalance.toString()\n      };\n    })();\n  }\n\n}\n\nexports.Account = Account;","map":{"version":3,"sources":["C:/Users/Oleksandr Sai/source/repos/OlexandrSai/near--art--demo/node_modules/near-api-js/lib/account.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Account","bn_js_1","require","depd_1","transaction_1","providers_1","borsh_1","key_pair_1","errors_1","rpc_errors_1","constants_1","exponential_backoff_1","TX_NONCE_RETRY_NUMBER","TX_NONCE_RETRY_WAIT","TX_NONCE_RETRY_WAIT_BACKOFF","parseJsonFromRawResponse","response","JSON","parse","Buffer","from","toString","bytesJsonStringify","input","stringify","constructor","connection","accountId","accessKeyByPublicKeyCache","ready","deprecate","default","Promise","resolve","fetchState","state","provider","query","request_type","account_id","finality","printLogsAndFailures","contractId","results","process","env","result","console","log","receiptIds","length","join","printLogs","logs","failure","warn","prefix","signTransaction","receiverId","actions","accessKeyInfo","findAccessKey","TypedError","networkId","signer","accessKey","block","blockHash","header","hash","nonce","baseDecode","signAndSendTransaction","args","signAndSendTransactionV1","signAndSendTransactionV2","returnError","txHash","signedTx","publicKey","transaction","sendTransaction","error","type","logWarning","baseEncode","context","ErrorContext","flatLogs","transaction_outcome","receipts_outcome","reduce","acc","it","outcome","status","Failure","concat","receipt_ids","parseRpcError","error_message","error_type","id","parseResultError","getPublicKey","cachedAccessKey","undefined","public_key","e","createAndDeployContract","data","amount","fullAccessKey","createAccount","transfer","addKey","PublicKey","deployContract","contractAccount","sendMoney","newAccountId","deleteAccount","beneficiaryId","functionCall","functionCallV1","functionCallV2","methodName","gas","validateArgs","DEFAULT_FUNCTION_CALL_GAS","attachedDeposit","walletMeta","walletCallbackUrl","stringifyArg","stringifyJsonOrBytes","methodNames","Array","isArray","functionCallAccessKey","deleteKey","stake","isUint8Array","byteLength","PositionalArgsError","viewFunction","serializedArgs","method_name","args_base64","viewState","blockQuery","values","prefix_base64","map","key","getAccessKeys","keys","getAccountDetails","accessKeys","authorizedApps","filter","item","access_key","permission","perm","FunctionCall","receiver_id","allowance","getAccountBalance","protocolConfig","experimental_protocolConfig","costPerByte","runtime_config","storage_amount_per_byte","stateStaked","storage_usage","mul","staked","locked","totalBalance","add","availableBalance","sub","max","total","available"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst depd_1 = __importDefault(require(\"depd\"));\nconst transaction_1 = require(\"./transaction\");\nconst providers_1 = require(\"./providers\");\nconst borsh_1 = require(\"borsh\");\nconst key_pair_1 = require(\"./utils/key_pair\");\nconst errors_1 = require(\"./utils/errors\");\nconst rpc_errors_1 = require(\"./utils/rpc_errors\");\nconst constants_1 = require(\"./constants\");\nconst exponential_backoff_1 = __importDefault(require(\"./utils/exponential-backoff\"));\n// Default number of retries with different nonce before giving up on a transaction.\nconst TX_NONCE_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst TX_NONCE_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst TX_NONCE_RETRY_WAIT_BACKOFF = 1.5;\nfunction parseJsonFromRawResponse(response) {\n    return JSON.parse(Buffer.from(response).toString());\n}\nfunction bytesJsonStringify(input) {\n    return Buffer.from(JSON.stringify(input));\n}\n/**\n * This class provides common account related RPC calls including signing transactions with a {@link KeyPair}.\n *\n * @example {@link https://docs.near.org/docs/develop/front-end/naj-quick-reference#account}\n * @hint Use {@link WalletConnection} in the browser to redirect to {@link https://docs.near.org/docs/tools/near-wallet | NEAR Wallet} for Account/key management using the {@link BrowserLocalStorageKeyStore}.\n * @see {@link https://nomicon.io/DataStructures/Account.html | Account Spec}\n */\nclass Account {\n    constructor(connection, accountId) {\n        /** @hidden */\n        this.accessKeyByPublicKeyCache = {};\n        this.connection = connection;\n        this.accountId = accountId;\n    }\n    /** @hidden */\n    get ready() {\n        const deprecate = depd_1.default('Account.ready()');\n        deprecate('not needed anymore, always ready');\n        return Promise.resolve();\n    }\n    async fetchState() {\n        const deprecate = depd_1.default('Account.fetchState()');\n        deprecate('use `Account.state()` instead');\n    }\n    /**\n     * Returns basic NEAR account information via the `view_account` RPC query method\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-account}\n     */\n    async state() {\n        return this.connection.provider.query({\n            request_type: 'view_account',\n            account_id: this.accountId,\n            finality: 'optimistic'\n        });\n    }\n    /** @hidden */\n    printLogsAndFailures(contractId, results) {\n        if (!process.env[\"NEAR_NO_LOGS\"]) {\n            for (const result of results) {\n                console.log(`Receipt${result.receiptIds.length > 1 ? 's' : ''}: ${result.receiptIds.join(', ')}`);\n                this.printLogs(contractId, result.logs, '\\t');\n                if (result.failure) {\n                    console.warn(`\\tFailure [${contractId}]: ${result.failure}`);\n                }\n            }\n        }\n    }\n    /** @hidden */\n    printLogs(contractId, logs, prefix = '') {\n        if (!process.env[\"NEAR_NO_LOGS\"]) {\n            for (const log of logs) {\n                console.log(`${prefix}Log [${contractId}]: ${log}`);\n            }\n        }\n    }\n    /**\n     * Create a signed transaction which can be broadcast to the network\n     * @param receiverId NEAR account receiving the transaction\n     * @param actions list of actions to perform as part of the transaction\n     * @see {@link JsonRpcProvider.sendTransaction}\n     */\n    async signTransaction(receiverId, actions) {\n        const accessKeyInfo = await this.findAccessKey(receiverId, actions);\n        if (!accessKeyInfo) {\n            throw new providers_1.TypedError(`Can not sign transactions for account ${this.accountId} on network ${this.connection.networkId}, no matching key pair found in ${this.connection.signer}.`, 'KeyNotFound');\n        }\n        const { accessKey } = accessKeyInfo;\n        const block = await this.connection.provider.block({ finality: 'final' });\n        const blockHash = block.header.hash;\n        const nonce = ++accessKey.nonce;\n        return await transaction_1.signTransaction(receiverId, nonce, actions, borsh_1.baseDecode(blockHash), this.connection.signer, this.accountId, this.connection.networkId);\n    }\n    signAndSendTransaction(...args) {\n        if (typeof args[0] === 'string') {\n            return this.signAndSendTransactionV1(args[0], args[1]);\n        }\n        else {\n            return this.signAndSendTransactionV2(args[0]);\n        }\n    }\n    signAndSendTransactionV1(receiverId, actions) {\n        const deprecate = depd_1.default('Account.signAndSendTransaction(receiverId, actions');\n        deprecate('use `Account.signAndSendTransaction(SignAndSendTransactionOptions)` instead');\n        return this.signAndSendTransactionV2({ receiverId, actions });\n    }\n    async signAndSendTransactionV2({ receiverId, actions, returnError }) {\n        let txHash, signedTx;\n        // TODO: TX_NONCE (different constants for different uses of exponentialBackoff?)\n        const result = await exponential_backoff_1.default(TX_NONCE_RETRY_WAIT, TX_NONCE_RETRY_NUMBER, TX_NONCE_RETRY_WAIT_BACKOFF, async () => {\n            [txHash, signedTx] = await this.signTransaction(receiverId, actions);\n            const publicKey = signedTx.transaction.publicKey;\n            try {\n                return await this.connection.provider.sendTransaction(signedTx);\n            }\n            catch (error) {\n                if (error.type === 'InvalidNonce') {\n                    errors_1.logWarning(`Retrying transaction ${receiverId}:${borsh_1.baseEncode(txHash)} with new nonce.`);\n                    delete this.accessKeyByPublicKeyCache[publicKey.toString()];\n                    return null;\n                }\n                if (error.type === 'Expired') {\n                    errors_1.logWarning(`Retrying transaction ${receiverId}:${borsh_1.baseEncode(txHash)} due to expired block hash`);\n                    return null;\n                }\n                error.context = new providers_1.ErrorContext(borsh_1.baseEncode(txHash));\n                throw error;\n            }\n        });\n        if (!result) {\n            // TODO: This should have different code actually, as means \"transaction not submitted for sure\"\n            throw new providers_1.TypedError('nonce retries exceeded for transaction. This usually means there are too many parallel requests with the same access key.', 'RetriesExceeded');\n        }\n        const flatLogs = [result.transaction_outcome, ...result.receipts_outcome].reduce((acc, it) => {\n            if (it.outcome.logs.length ||\n                (typeof it.outcome.status === 'object' && typeof it.outcome.status.Failure === 'object')) {\n                return acc.concat({\n                    'receiptIds': it.outcome.receipt_ids,\n                    'logs': it.outcome.logs,\n                    'failure': typeof it.outcome.status.Failure != 'undefined' ? rpc_errors_1.parseRpcError(it.outcome.status.Failure) : null\n                });\n            }\n            else\n                return acc;\n        }, []);\n        this.printLogsAndFailures(signedTx.transaction.receiverId, flatLogs);\n        if (!returnError && typeof result.status === 'object' && typeof result.status.Failure === 'object') {\n            // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n            if (result.status.Failure.error_message && result.status.Failure.error_type) {\n                throw new providers_1.TypedError(`Transaction ${result.transaction_outcome.id} failed. ${result.status.Failure.error_message}`, result.status.Failure.error_type);\n            }\n            else {\n                throw rpc_errors_1.parseResultError(result);\n            }\n        }\n        // TODO: if Tx is Unknown or Started.\n        return result;\n    }\n    /**\n     * Finds the {@link AccessKeyView} associated with the accounts {@link PublicKey} stored in the {@link KeyStore}.\n     *\n     * @todo Find matching access key based on transaction (i.e. receiverId and actions)\n     *\n     * @param receiverId currently unused (see todo)\n     * @param actions currently unused (see todo)\n     * @returns `{ publicKey PublicKey; accessKey: AccessKeyView }`\n     */\n    async findAccessKey(receiverId, actions) {\n        // TODO: Find matching access key based on transaction (i.e. receiverId and actions)\n        const publicKey = await this.connection.signer.getPublicKey(this.accountId, this.connection.networkId);\n        if (!publicKey) {\n            return null;\n        }\n        const cachedAccessKey = this.accessKeyByPublicKeyCache[publicKey.toString()];\n        if (cachedAccessKey !== undefined) {\n            return { publicKey, accessKey: cachedAccessKey };\n        }\n        try {\n            const accessKey = await this.connection.provider.query({\n                request_type: 'view_access_key',\n                account_id: this.accountId,\n                public_key: publicKey.toString(),\n                finality: 'optimistic'\n            });\n            // this function can be called multiple times and retrieve the same access key\n            // this checks to see if the access key was already retrieved and cached while\n            // the above network call was in flight. To keep nonce values in line, we return\n            // the cached access key.\n            if (this.accessKeyByPublicKeyCache[publicKey.toString()]) {\n                return { publicKey, accessKey: this.accessKeyByPublicKeyCache[publicKey.toString()] };\n            }\n            this.accessKeyByPublicKeyCache[publicKey.toString()] = accessKey;\n            return { publicKey, accessKey };\n        }\n        catch (e) {\n            if (e.type == 'AccessKeyDoesNotExist') {\n                return null;\n            }\n            throw e;\n        }\n    }\n    /**\n     * Create a new account and deploy a contract to it\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param publicKey The public key to add to the created contract account\n     * @param data The compiled contract code\n     * @param amount of NEAR to transfer to the created contract account. Transfer enough to pay for storage https://docs.near.org/docs/concepts/storage-staking\n     */\n    async createAndDeployContract(contractId, publicKey, data, amount) {\n        const accessKey = transaction_1.fullAccessKey();\n        await this.signAndSendTransaction({\n            receiverId: contractId,\n            actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey), transaction_1.deployContract(data)]\n        });\n        const contractAccount = new Account(this.connection, contractId);\n        return contractAccount;\n    }\n    /**\n     * @param receiverId NEAR account receiving Ⓝ\n     * @param amount Amount to send in yoctoⓃ\n     */\n    async sendMoney(receiverId, amount) {\n        return this.signAndSendTransaction({\n            receiverId,\n            actions: [transaction_1.transfer(amount)]\n        });\n    }\n    /**\n     * @param newAccountId NEAR account name to be created\n     * @param publicKey A public key created from the masterAccount\n     */\n    async createAccount(newAccountId, publicKey, amount) {\n        const accessKey = transaction_1.fullAccessKey();\n        return this.signAndSendTransaction({\n            receiverId: newAccountId,\n            actions: [transaction_1.createAccount(), transaction_1.transfer(amount), transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n        });\n    }\n    /**\n     * @param beneficiaryId The NEAR account that will receive the remaining Ⓝ balance from the account being deleted\n     */\n    async deleteAccount(beneficiaryId) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.deleteAccount(beneficiaryId)]\n        });\n    }\n    /**\n     * @param data The compiled contract code\n     */\n    async deployContract(data) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.deployContract(data)]\n        });\n    }\n    async functionCall(...args) {\n        if (typeof args[0] === 'string') {\n            return this.functionCallV1(args[0], args[1], args[2], args[3], args[4]);\n        }\n        else {\n            return this.functionCallV2(args[0]);\n        }\n    }\n    functionCallV1(contractId, methodName, args, gas, amount) {\n        const deprecate = depd_1.default('Account.functionCall(contractId, methodName, args, gas, amount)');\n        deprecate('use `Account.functionCall(FunctionCallOptions)` instead');\n        args = args || {};\n        this.validateArgs(args);\n        return this.signAndSendTransaction({\n            receiverId: contractId,\n            actions: [transaction_1.functionCall(methodName, args, gas || constants_1.DEFAULT_FUNCTION_CALL_GAS, amount)]\n        });\n    }\n    functionCallV2({ contractId, methodName, args = {}, gas = constants_1.DEFAULT_FUNCTION_CALL_GAS, attachedDeposit, walletMeta, walletCallbackUrl, stringify }) {\n        this.validateArgs(args);\n        const stringifyArg = stringify === undefined ? transaction_1.stringifyJsonOrBytes : stringify;\n        return this.signAndSendTransaction({\n            receiverId: contractId,\n            actions: [transaction_1.functionCall(methodName, args, gas, attachedDeposit, stringifyArg)],\n            walletMeta,\n            walletCallbackUrl\n        });\n    }\n    /**\n     * @see {@link https://docs.near.org/docs/concepts/account#access-keys}\n     * @todo expand this API to support more options.\n     * @param publicKey A public key to be associated with the contract\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodNames The method names on the contract that should be allowed to be called. Pass null for no method names and '' or [] for any method names.\n     * @param amount Payment in yoctoⓃ that is sent to the contract during this function call\n     */\n    async addKey(publicKey, contractId, methodNames, amount) {\n        if (!methodNames) {\n            methodNames = [];\n        }\n        if (!Array.isArray(methodNames)) {\n            methodNames = [methodNames];\n        }\n        let accessKey;\n        if (!contractId) {\n            accessKey = transaction_1.fullAccessKey();\n        }\n        else {\n            accessKey = transaction_1.functionCallAccessKey(contractId, methodNames, amount);\n        }\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.addKey(key_pair_1.PublicKey.from(publicKey), accessKey)]\n        });\n    }\n    /**\n     * @param publicKey The public key to be deleted\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async deleteKey(publicKey) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.deleteKey(key_pair_1.PublicKey.from(publicKey))]\n        });\n    }\n    /**\n     * @see {@link https://docs.near.org/docs/validator/staking-overview}\n     *\n     * @param publicKey The public key for the account that's staking\n     * @param amount The account to stake in yoctoⓃ\n     */\n    async stake(publicKey, amount) {\n        return this.signAndSendTransaction({\n            receiverId: this.accountId,\n            actions: [transaction_1.stake(amount, key_pair_1.PublicKey.from(publicKey))]\n        });\n    }\n    /** @hidden */\n    validateArgs(args) {\n        const isUint8Array = args.byteLength !== undefined && args.byteLength === args.length;\n        if (isUint8Array) {\n            return;\n        }\n        if (Array.isArray(args) || typeof args !== 'object') {\n            throw new errors_1.PositionalArgsError();\n        }\n    }\n    /**\n     * Invoke a contract view function using the RPC API.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#call-a-contract-function}\n     *\n     * @param contractId NEAR account where the contract is deployed\n     * @param methodName The view-only method (no state mutations) name on the contract as it is written in the contract code\n     * @param args Any arguments to the view contract method, wrapped in JSON\n     * @param options.parse Parse the result of the call. Receives a Buffer (bytes array) and converts it to any object. By default result will be treated as json.\n     * @param options.stringify Convert input arguments into a bytes array. By default the input is treated as a JSON.\n     * @returns {Promise<any>}\n     */\n    async viewFunction(contractId, methodName, args = {}, { parse = parseJsonFromRawResponse, stringify = bytesJsonStringify } = {}) {\n        this.validateArgs(args);\n        const serializedArgs = stringify(args).toString('base64');\n        const result = await this.connection.provider.query({\n            request_type: 'call_function',\n            account_id: contractId,\n            method_name: methodName,\n            args_base64: serializedArgs,\n            finality: 'optimistic'\n        });\n        if (result.logs) {\n            this.printLogs(contractId, result.logs);\n        }\n        return result.result && result.result.length > 0 && parse(Buffer.from(result.result));\n    }\n    /**\n     * Returns the state (key value pairs) of this account's contract based on the key prefix.\n     * Pass an empty string for prefix if you would like to return the entire state.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-contract-state}\n     *\n     * @param prefix allows to filter which keys should be returned. Empty prefix means all keys. String prefix is utf-8 encoded.\n     * @param blockQuery specifies which block to query state at. By default returns last \"optimistic\" block (i.e. not necessarily finalized).\n     */\n    async viewState(prefix, blockQuery = { finality: 'optimistic' }) {\n        const { values } = await this.connection.provider.query({\n            request_type: 'view_state',\n            ...blockQuery,\n            account_id: this.accountId,\n            prefix_base64: Buffer.from(prefix).toString('base64')\n        });\n        return values.map(({ key, value }) => ({\n            key: Buffer.from(key, 'base64'),\n            value: Buffer.from(value, 'base64')\n        }));\n    }\n    /**\n     * Get all access keys for the account\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#view-access-key-list}\n     */\n    async getAccessKeys() {\n        const response = await this.connection.provider.query({\n            request_type: 'view_access_key_list',\n            account_id: this.accountId,\n            finality: 'optimistic'\n        });\n        // A breaking API change introduced extra information into the\n        // response, so it now returns an object with a `keys` field instead\n        // of an array: https://github.com/nearprotocol/nearcore/pull/1789\n        if (Array.isArray(response)) {\n            return response;\n        }\n        return response.keys;\n    }\n    /**\n     * Returns a list of authorized apps\n     * @todo update the response value to return all the different keys, not just app keys.\n     */\n    async getAccountDetails() {\n        // TODO: update the response value to return all the different keys, not just app keys.\n        // Also if we need this function, or getAccessKeys is good enough.\n        const accessKeys = await this.getAccessKeys();\n        const authorizedApps = accessKeys\n            .filter(item => item.access_key.permission !== 'FullAccess')\n            .map(item => {\n            const perm = item.access_key.permission;\n            return {\n                contractId: perm.FunctionCall.receiver_id,\n                amount: perm.FunctionCall.allowance,\n                publicKey: item.public_key,\n            };\n        });\n        return { authorizedApps };\n    }\n    /**\n     * Returns calculated account balance\n     */\n    async getAccountBalance() {\n        const protocolConfig = await this.connection.provider.experimental_protocolConfig({ finality: 'final' });\n        const state = await this.state();\n        const costPerByte = new bn_js_1.default(protocolConfig.runtime_config.storage_amount_per_byte);\n        const stateStaked = new bn_js_1.default(state.storage_usage).mul(costPerByte);\n        const staked = new bn_js_1.default(state.locked);\n        const totalBalance = new bn_js_1.default(state.amount).add(staked);\n        const availableBalance = totalBalance.sub(bn_js_1.default.max(staked, stateStaked));\n        return {\n            total: totalBalance.toString(),\n            stateStaked: stateStaked.toString(),\n            staked: staked.toString(),\n            available: availableBalance.toString()\n        };\n    }\n}\nexports.Account = Account;\n"]},"metadata":{},"sourceType":"script"}