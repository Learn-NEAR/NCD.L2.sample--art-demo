{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Oleksandr Sai\\\\source\\\\repos\\\\OlexandrSai\\\\near--art--demo\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcProvider = exports.ErrorContext = exports.TypedError = void 0;\n/**\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the NEAR RPC API.\n * @see {@link providers/provider} for a list of request and response types\n */\n\nconst depd_1 = __importDefault(require(\"depd\"));\n\nconst provider_1 = require(\"./provider\");\n\nconst web_1 = require(\"../utils/web\");\n\nconst errors_1 = require(\"../utils/errors\");\n\nObject.defineProperty(exports, \"TypedError\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.TypedError;\n  }\n});\nObject.defineProperty(exports, \"ErrorContext\", {\n  enumerable: true,\n  get: function () {\n    return errors_1.ErrorContext;\n  }\n});\n\nconst borsh_1 = require(\"borsh\");\n\nconst exponential_backoff_1 = __importDefault(require(\"../utils/exponential-backoff\"));\n\nconst rpc_errors_1 = require(\"../utils/rpc_errors\"); // Default number of retries before giving up on a request.\n\n\nconst REQUEST_RETRY_NUMBER = 12; // Default wait until next retry in millis.\n\nconst REQUEST_RETRY_WAIT = 500; // Exponential back off for waiting to retry.\n\nconst REQUEST_RETRY_WAIT_BACKOFF = 1.5; /// Keep ids unique across all connections.\n\nlet _nextId = 123;\n/**\n * Client class to interact with the NEAR RPC API.\n * @see {@link https://github.com/near/nearcore/tree/master/chain/jsonrpc}\n */\n\nclass JsonRpcProvider extends provider_1.Provider {\n  /**\n   * @param connectionInfoOrUrl ConnectionInfo or RPC API endpoint URL (deprecated)\n   */\n  constructor(connectionInfoOrUrl) {\n    super();\n\n    if (connectionInfoOrUrl != null && typeof connectionInfoOrUrl == 'object') {\n      this.connection = connectionInfoOrUrl;\n    } else {\n      const deprecate = depd_1.default('JsonRpcProvider(url?: string)');\n      deprecate('use `JsonRpcProvider(connectionInfo: ConnectionInfo)` instead');\n      this.connection = {\n        url: connectionInfoOrUrl\n      };\n    }\n  }\n  /**\n   * Gets the RPC's status\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#general-validator-status}\n   */\n\n\n  status() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.sendJsonRpc('status', []);\n    })();\n  }\n  /**\n   * Sends a signed transaction to the RPC and waits until transaction is fully complete\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await}\n   *\n   * @param signedTransaction The signed transaction being sent\n   */\n\n\n  sendTransaction(signedTransaction) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const bytes = signedTransaction.encode();\n      return _this2.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]);\n    })();\n  }\n  /**\n   * Sends a signed transaction to the RPC and immediately returns transaction hash\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n   * @param signedTransaction The signed transaction being sent\n   * @returns {Promise<FinalExecutionOutcome>}\n   */\n\n\n  sendTransactionAsync(signedTransaction) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const bytes = signedTransaction.encode();\n      return _this3.sendJsonRpc('broadcast_tx_async', [Buffer.from(bytes).toString('base64')]);\n    })();\n  }\n  /**\n   * Gets a transaction's status from the RPC\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#transaction-status}\n   *\n   * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n   * @param accountId The NEAR account that signed the transaction\n   */\n\n\n  txStatus(txHash, accountId) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (typeof txHash === 'string') {\n        return _this4.txStatusString(txHash, accountId);\n      } else {\n        return _this4.txStatusUint8Array(txHash, accountId);\n      }\n    })();\n  }\n\n  txStatusUint8Array(txHash, accountId) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this5.sendJsonRpc('tx', [borsh_1.baseEncode(txHash), accountId]);\n    })();\n  }\n\n  txStatusString(txHash, accountId) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this6.sendJsonRpc('tx', [txHash, accountId]);\n    })();\n  }\n  /**\n   * Gets a transaction's status from the RPC with receipts\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n   * @param txHash The hash of the transaction\n   * @param accountId The NEAR account that signed the transaction\n   * @returns {Promise<FinalExecutionOutcome>}\n   */\n\n\n  txStatusReceipts(txHash, accountId) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this7.sendJsonRpc('EXPERIMENTAL_tx_status', [borsh_1.baseEncode(txHash), accountId]);\n    })();\n  }\n  /**\n   * Query the RPC as [shown in the docs](https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts)\n   * Query the RPC by passing an {@link RpcQueryRequest}\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts}\n   *\n   * @typeParam T the shape of the returned query response\n   */\n\n\n  query(...args) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      let result;\n\n      if (args.length === 1) {\n        result = yield _this8.sendJsonRpc('query', args[0]);\n      } else {\n        const [path, data] = args;\n        result = yield _this8.sendJsonRpc('query', [path, data]);\n      }\n\n      if (result && result.error) {\n        throw new errors_1.TypedError(`Querying ${args} failed: ${result.error}.\\n${JSON.stringify(result, null, 2)}`, rpc_errors_1.getErrorTypeFromErrorMessage(result.error));\n      }\n\n      return result;\n    })();\n  }\n  /**\n   * Query for block info from the RPC\n   * pass block_id OR finality as blockQuery, not both\n   * @see {@link https://docs.near.org/docs/interaction/rpc#block}\n   *\n   * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)\n   */\n\n\n  block(blockQuery) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        finality\n      } = blockQuery;\n      let {\n        blockId\n      } = blockQuery;\n\n      if (typeof blockQuery !== 'object') {\n        const deprecate = depd_1.default('JsonRpcProvider.block(blockId)');\n        deprecate('use `block({ blockId })` or `block({ finality })` instead');\n        blockId = blockQuery;\n      }\n\n      return _this9.sendJsonRpc('block', {\n        block_id: blockId,\n        finality\n      });\n    })();\n  }\n  /**\n   * Query changes in block from the RPC\n   * pass block_id OR finality as blockQuery, not both\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#block-details)\n   */\n\n\n  blockChanges(blockQuery) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        finality\n      } = blockQuery;\n      const {\n        blockId\n      } = blockQuery;\n      return _this10.sendJsonRpc('EXPERIMENTAL_changes_in_block', {\n        block_id: blockId,\n        finality\n      });\n    })();\n  }\n  /**\n   * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n   * @see {@link https://docs.near.org/docs/interaction/rpc#chunk}\n   *\n   * @param chunkId Hash of a chunk ID or shard ID\n   */\n\n\n  chunk(chunkId) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this11.sendJsonRpc('chunk', [chunkId]);\n    })();\n  }\n  /**\n   * Query validators of the epoch defined by the given block id.\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#detailed-validator-status}\n   *\n   * @param blockId Block hash or height, or null for latest.\n   */\n\n\n  validators(blockId) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this12.sendJsonRpc('validators', [blockId]);\n    })();\n  }\n  /**\n   * @deprecated\n   * Gets the genesis config from RPC\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#genesis-config}\n   */\n\n\n  experimental_genesisConfig() {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      const deprecate = depd_1.default('JsonRpcProvider.experimental_protocolConfig()');\n      deprecate('use `experimental_protocolConfig({ sync_checkpoint: \\'genesis\\' })` to fetch the up-to-date or genesis protocol config explicitly');\n      return yield _this13.sendJsonRpc('EXPERIMENTAL_protocol_config', {\n        sync_checkpoint: 'genesis'\n      });\n    })();\n  }\n  /**\n   * Gets the protocol config at a block from RPC\n   * @see {@link }\n   *\n   * @param blockReference specifies the block to get the protocol config for\n   */\n\n\n  experimental_protocolConfig(blockReference) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this14.sendJsonRpc('EXPERIMENTAL_protocol_config', blockReference);\n    })();\n  }\n  /**\n   * @deprecated Use {@link lightClientProof} instead\n   */\n\n\n  experimental_lightClientProof(request) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      const deprecate = depd_1.default('JsonRpcProvider.experimental_lightClientProof(request)');\n      deprecate('use `lightClientProof` instead');\n      return yield _this15.lightClientProof(request);\n    })();\n  }\n  /**\n   * Gets a light client execution proof for verifying execution outcomes\n   * @see {@link https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof}\n   */\n\n\n  lightClientProof(request) {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this16.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n    })();\n  }\n  /**\n   * Gets access key changes for a given array of accountIds\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n   * @returns {Promise<ChangeResult>}\n   */\n\n\n  accessKeyChanges(accountIdArray, blockQuery) {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        finality\n      } = blockQuery;\n      const {\n        blockId\n      } = blockQuery;\n      return _this17.sendJsonRpc('EXPERIMENTAL_changes', {\n        changes_type: 'all_access_key_changes',\n        account_ids: accountIdArray,\n        block_id: blockId,\n        finality\n      });\n    })();\n  }\n  /**\n   * Gets single access key changes for a given array of access keys\n   * pass block_id OR finality as blockQuery, not both\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n   * @returns {Promise<ChangeResult>}\n   */\n\n\n  singleAccessKeyChanges(accessKeyArray, blockQuery) {\n    var _this18 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        finality\n      } = blockQuery;\n      const {\n        blockId\n      } = blockQuery;\n      return _this18.sendJsonRpc('EXPERIMENTAL_changes', {\n        changes_type: 'single_access_key_changes',\n        keys: accessKeyArray,\n        block_id: blockId,\n        finality\n      });\n    })();\n  }\n  /**\n   * Gets account changes for a given array of accountIds\n   * pass block_id OR finality as blockQuery, not both\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n   * @returns {Promise<ChangeResult>}\n   */\n\n\n  accountChanges(accountIdArray, blockQuery) {\n    var _this19 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        finality\n      } = blockQuery;\n      const {\n        blockId\n      } = blockQuery;\n      return _this19.sendJsonRpc('EXPERIMENTAL_changes', {\n        changes_type: 'account_changes',\n        account_ids: accountIdArray,\n        block_id: blockId,\n        finality\n      });\n    })();\n  }\n  /**\n   * Gets contract state changes for a given array of accountIds\n   * pass block_id OR finality as blockQuery, not both\n   * Note: If you pass a keyPrefix it must be base64 encoded\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n   * @returns {Promise<ChangeResult>}\n   */\n\n\n  contractStateChanges(accountIdArray, blockQuery, keyPrefix = '') {\n    var _this20 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        finality\n      } = blockQuery;\n      const {\n        blockId\n      } = blockQuery;\n      return _this20.sendJsonRpc('EXPERIMENTAL_changes', {\n        changes_type: 'data_changes',\n        account_ids: accountIdArray,\n        key_prefix_base64: keyPrefix,\n        block_id: blockId,\n        finality\n      });\n    })();\n  }\n  /**\n   * Gets contract code changes for a given array of accountIds\n   * pass block_id OR finality as blockQuery, not both\n   * Note: Change is returned in a base64 encoded WASM file\n   * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n   * @returns {Promise<ChangeResult>}\n   */\n\n\n  contractCodeChanges(accountIdArray, blockQuery) {\n    var _this21 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        finality\n      } = blockQuery;\n      const {\n        blockId\n      } = blockQuery;\n      return _this21.sendJsonRpc('EXPERIMENTAL_changes', {\n        changes_type: 'contract_code_changes',\n        account_ids: accountIdArray,\n        block_id: blockId,\n        finality\n      });\n    })();\n  }\n  /**\n   * Returns gas price for a specific block_height or block_hash.\n   * @see {@link https://docs.near.org/docs/develop/front-end/rpc#gas-price}\n   *\n   * @param blockId Block hash or height, or null for latest.\n   */\n\n\n  gasPrice(blockId) {\n    var _this22 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this22.sendJsonRpc('gas_price', [blockId]);\n    })();\n  }\n  /**\n   * Directly call the RPC specifying the method and params\n   *\n   * @param method RPC method\n   * @param params Parameters to the method\n   */\n\n\n  sendJsonRpc(method, params) {\n    var _this23 = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield exponential_backoff_1.default(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, /*#__PURE__*/_asyncToGenerator(function* () {\n        try {\n          const request = {\n            method,\n            params,\n            id: _nextId++,\n            jsonrpc: '2.0'\n          };\n          const response = yield web_1.fetchJson(_this23.connection, JSON.stringify(request));\n\n          if (response.error) {\n            if (typeof response.error.data === 'object') {\n              if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {\n                // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                throw new errors_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n              }\n\n              throw rpc_errors_1.parseRpcError(response.error.data);\n            } else {\n              const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`; // NOTE: All this hackery is happening because structured errors not implemented\n              // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n\n              if (response.error.data === 'Timeout' || errorMessage.includes('Timeout error') || errorMessage.includes('query has timed out')) {\n                throw new errors_1.TypedError(errorMessage, 'TimeoutError');\n              }\n\n              throw new errors_1.TypedError(errorMessage, rpc_errors_1.getErrorTypeFromErrorMessage(response.error.data));\n            }\n          } // Success when response.error is not exist\n\n\n          return response;\n        } catch (error) {\n          if (error.type === 'TimeoutError') {\n            if (!process.env['NEAR_NO_LOGS']) {\n              console.warn(`Retrying request to ${method} as it has timed out`, params);\n            }\n\n            return null;\n          }\n\n          throw error;\n        }\n      }));\n      const {\n        result\n      } = response; // From jsonrpc spec:\n      // result\n      //   This member is REQUIRED on success.\n      //   This member MUST NOT exist if there was an error invoking the method.\n\n      if (typeof result === 'undefined') {\n        throw new errors_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, 'RetriesExceeded');\n      }\n\n      return result;\n    })();\n  }\n\n}\n\nexports.JsonRpcProvider = JsonRpcProvider;","map":{"version":3,"sources":["C:/Users/Oleksandr Sai/source/repos/OlexandrSai/near--art--demo/node_modules/near-api-js/lib/providers/json-rpc-provider.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","JsonRpcProvider","ErrorContext","TypedError","depd_1","require","provider_1","web_1","errors_1","enumerable","get","borsh_1","exponential_backoff_1","rpc_errors_1","REQUEST_RETRY_NUMBER","REQUEST_RETRY_WAIT","REQUEST_RETRY_WAIT_BACKOFF","_nextId","Provider","constructor","connectionInfoOrUrl","connection","deprecate","default","url","status","sendJsonRpc","sendTransaction","signedTransaction","bytes","encode","Buffer","from","toString","sendTransactionAsync","txStatus","txHash","accountId","txStatusString","txStatusUint8Array","baseEncode","txStatusReceipts","query","args","result","length","path","data","error","JSON","stringify","getErrorTypeFromErrorMessage","block","blockQuery","finality","blockId","block_id","blockChanges","chunk","chunkId","validators","experimental_genesisConfig","sync_checkpoint","experimental_protocolConfig","blockReference","experimental_lightClientProof","request","lightClientProof","accessKeyChanges","accountIdArray","changes_type","account_ids","singleAccessKeyChanges","accessKeyArray","keys","accountChanges","contractStateChanges","keyPrefix","key_prefix_base64","contractCodeChanges","gasPrice","method","params","response","id","jsonrpc","fetchJson","error_message","error_type","parseRpcError","errorMessage","code","message","includes","type","process","env","console","warn"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcProvider = exports.ErrorContext = exports.TypedError = void 0;\n/**\n * This module contains the {@link JsonRpcProvider} client class\n * which can be used to interact with the NEAR RPC API.\n * @see {@link providers/provider} for a list of request and response types\n */\nconst depd_1 = __importDefault(require(\"depd\"));\nconst provider_1 = require(\"./provider\");\nconst web_1 = require(\"../utils/web\");\nconst errors_1 = require(\"../utils/errors\");\nObject.defineProperty(exports, \"TypedError\", { enumerable: true, get: function () { return errors_1.TypedError; } });\nObject.defineProperty(exports, \"ErrorContext\", { enumerable: true, get: function () { return errors_1.ErrorContext; } });\nconst borsh_1 = require(\"borsh\");\nconst exponential_backoff_1 = __importDefault(require(\"../utils/exponential-backoff\"));\nconst rpc_errors_1 = require(\"../utils/rpc_errors\");\n// Default number of retries before giving up on a request.\nconst REQUEST_RETRY_NUMBER = 12;\n// Default wait until next retry in millis.\nconst REQUEST_RETRY_WAIT = 500;\n// Exponential back off for waiting to retry.\nconst REQUEST_RETRY_WAIT_BACKOFF = 1.5;\n/// Keep ids unique across all connections.\nlet _nextId = 123;\n/**\n * Client class to interact with the NEAR RPC API.\n * @see {@link https://github.com/near/nearcore/tree/master/chain/jsonrpc}\n */\nclass JsonRpcProvider extends provider_1.Provider {\n    /**\n     * @param connectionInfoOrUrl ConnectionInfo or RPC API endpoint URL (deprecated)\n     */\n    constructor(connectionInfoOrUrl) {\n        super();\n        if (connectionInfoOrUrl != null && typeof connectionInfoOrUrl == 'object') {\n            this.connection = connectionInfoOrUrl;\n        }\n        else {\n            const deprecate = depd_1.default('JsonRpcProvider(url?: string)');\n            deprecate('use `JsonRpcProvider(connectionInfo: ConnectionInfo)` instead');\n            this.connection = { url: connectionInfoOrUrl };\n        }\n    }\n    /**\n     * Gets the RPC's status\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#general-validator-status}\n     */\n    async status() {\n        return this.sendJsonRpc('status', []);\n    }\n    /**\n     * Sends a signed transaction to the RPC and waits until transaction is fully complete\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#send-transaction-await}\n     *\n     * @param signedTransaction The signed transaction being sent\n     */\n    async sendTransaction(signedTransaction) {\n        const bytes = signedTransaction.encode();\n        return this.sendJsonRpc('broadcast_tx_commit', [Buffer.from(bytes).toString('base64')]);\n    }\n    /**\n     * Sends a signed transaction to the RPC and immediately returns transaction hash\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#send-transaction-async)\n     * @param signedTransaction The signed transaction being sent\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async sendTransactionAsync(signedTransaction) {\n        const bytes = signedTransaction.encode();\n        return this.sendJsonRpc('broadcast_tx_async', [Buffer.from(bytes).toString('base64')]);\n    }\n    /**\n     * Gets a transaction's status from the RPC\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#transaction-status}\n     *\n     * @param txHash A transaction hash as either a Uint8Array or a base58 encoded string\n     * @param accountId The NEAR account that signed the transaction\n     */\n    async txStatus(txHash, accountId) {\n        if (typeof txHash === 'string') {\n            return this.txStatusString(txHash, accountId);\n        }\n        else {\n            return this.txStatusUint8Array(txHash, accountId);\n        }\n    }\n    async txStatusUint8Array(txHash, accountId) {\n        return this.sendJsonRpc('tx', [borsh_1.baseEncode(txHash), accountId]);\n    }\n    async txStatusString(txHash, accountId) {\n        return this.sendJsonRpc('tx', [txHash, accountId]);\n    }\n    /**\n     * Gets a transaction's status from the RPC with receipts\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#transaction-status-with-receipts)\n     * @param txHash The hash of the transaction\n     * @param accountId The NEAR account that signed the transaction\n     * @returns {Promise<FinalExecutionOutcome>}\n     */\n    async txStatusReceipts(txHash, accountId) {\n        return this.sendJsonRpc('EXPERIMENTAL_tx_status', [borsh_1.baseEncode(txHash), accountId]);\n    }\n    /**\n     * Query the RPC as [shown in the docs](https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts)\n     * Query the RPC by passing an {@link RpcQueryRequest}\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#accounts--contracts}\n     *\n     * @typeParam T the shape of the returned query response\n     */\n    async query(...args) {\n        let result;\n        if (args.length === 1) {\n            result = await this.sendJsonRpc('query', args[0]);\n        }\n        else {\n            const [path, data] = args;\n            result = await this.sendJsonRpc('query', [path, data]);\n        }\n        if (result && result.error) {\n            throw new errors_1.TypedError(`Querying ${args} failed: ${result.error}.\\n${JSON.stringify(result, null, 2)}`, rpc_errors_1.getErrorTypeFromErrorMessage(result.error));\n        }\n        return result;\n    }\n    /**\n     * Query for block info from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * @see {@link https://docs.near.org/docs/interaction/rpc#block}\n     *\n     * @param blockQuery {@link BlockReference} (passing a {@link BlockId} is deprecated)\n     */\n    async block(blockQuery) {\n        const { finality } = blockQuery;\n        let { blockId } = blockQuery;\n        if (typeof blockQuery !== 'object') {\n            const deprecate = depd_1.default('JsonRpcProvider.block(blockId)');\n            deprecate('use `block({ blockId })` or `block({ finality })` instead');\n            blockId = blockQuery;\n        }\n        return this.sendJsonRpc('block', { block_id: blockId, finality });\n    }\n    /**\n     * Query changes in block from the RPC\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#block-details)\n     */\n    async blockChanges(blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes_in_block', { block_id: blockId, finality });\n    }\n    /**\n     * Queries for details about a specific chunk appending details of receipts and transactions to the same chunk data provided by a block\n     * @see {@link https://docs.near.org/docs/interaction/rpc#chunk}\n     *\n     * @param chunkId Hash of a chunk ID or shard ID\n     */\n    async chunk(chunkId) {\n        return this.sendJsonRpc('chunk', [chunkId]);\n    }\n    /**\n     * Query validators of the epoch defined by the given block id.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#detailed-validator-status}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    async validators(blockId) {\n        return this.sendJsonRpc('validators', [blockId]);\n    }\n    /**\n     * @deprecated\n     * Gets the genesis config from RPC\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#genesis-config}\n     */\n    async experimental_genesisConfig() {\n        const deprecate = depd_1.default('JsonRpcProvider.experimental_protocolConfig()');\n        deprecate('use `experimental_protocolConfig({ sync_checkpoint: \\'genesis\\' })` to fetch the up-to-date or genesis protocol config explicitly');\n        return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', { sync_checkpoint: 'genesis' });\n    }\n    /**\n     * Gets the protocol config at a block from RPC\n     * @see {@link }\n     *\n     * @param blockReference specifies the block to get the protocol config for\n     */\n    async experimental_protocolConfig(blockReference) {\n        return await this.sendJsonRpc('EXPERIMENTAL_protocol_config', blockReference);\n    }\n    /**\n     * @deprecated Use {@link lightClientProof} instead\n     */\n    async experimental_lightClientProof(request) {\n        const deprecate = depd_1.default('JsonRpcProvider.experimental_lightClientProof(request)');\n        deprecate('use `lightClientProof` instead');\n        return await this.lightClientProof(request);\n    }\n    /**\n     * Gets a light client execution proof for verifying execution outcomes\n     * @see {@link https://github.com/nearprotocol/NEPs/blob/master/specs/ChainSpec/LightClient.md#light-client-proof}\n     */\n    async lightClientProof(request) {\n        return await this.sendJsonRpc('EXPERIMENTAL_light_client_proof', request);\n    }\n    /**\n     * Gets access key changes for a given array of accountIds\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-all)\n     * @returns {Promise<ChangeResult>}\n     */\n    async accessKeyChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'all_access_key_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets single access key changes for a given array of access keys\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-access-key-changes-single)\n     * @returns {Promise<ChangeResult>}\n     */\n    async singleAccessKeyChanges(accessKeyArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'single_access_key_changes',\n            keys: accessKeyArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets account changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-account-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async accountChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'account_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets contract state changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: If you pass a keyPrefix it must be base64 encoded\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-state-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async contractStateChanges(accountIdArray, blockQuery, keyPrefix = '') {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'data_changes',\n            account_ids: accountIdArray,\n            key_prefix_base64: keyPrefix,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Gets contract code changes for a given array of accountIds\n     * pass block_id OR finality as blockQuery, not both\n     * Note: Change is returned in a base64 encoded WASM file\n     * See [docs for more info](https://docs.near.org/docs/develop/front-end/rpc#view-contract-code-changes)\n     * @returns {Promise<ChangeResult>}\n     */\n    async contractCodeChanges(accountIdArray, blockQuery) {\n        const { finality } = blockQuery;\n        const { blockId } = blockQuery;\n        return this.sendJsonRpc('EXPERIMENTAL_changes', {\n            changes_type: 'contract_code_changes',\n            account_ids: accountIdArray,\n            block_id: blockId,\n            finality\n        });\n    }\n    /**\n     * Returns gas price for a specific block_height or block_hash.\n     * @see {@link https://docs.near.org/docs/develop/front-end/rpc#gas-price}\n     *\n     * @param blockId Block hash or height, or null for latest.\n     */\n    async gasPrice(blockId) {\n        return await this.sendJsonRpc('gas_price', [blockId]);\n    }\n    /**\n     * Directly call the RPC specifying the method and params\n     *\n     * @param method RPC method\n     * @param params Parameters to the method\n     */\n    async sendJsonRpc(method, params) {\n        const response = await exponential_backoff_1.default(REQUEST_RETRY_WAIT, REQUEST_RETRY_NUMBER, REQUEST_RETRY_WAIT_BACKOFF, async () => {\n            try {\n                const request = {\n                    method,\n                    params,\n                    id: (_nextId++),\n                    jsonrpc: '2.0'\n                };\n                const response = await web_1.fetchJson(this.connection, JSON.stringify(request));\n                if (response.error) {\n                    if (typeof response.error.data === 'object') {\n                        if (typeof response.error.data.error_message === 'string' && typeof response.error.data.error_type === 'string') {\n                            // if error data has error_message and error_type properties, we consider that node returned an error in the old format\n                            throw new errors_1.TypedError(response.error.data.error_message, response.error.data.error_type);\n                        }\n                        throw rpc_errors_1.parseRpcError(response.error.data);\n                    }\n                    else {\n                        const errorMessage = `[${response.error.code}] ${response.error.message}: ${response.error.data}`;\n                        // NOTE: All this hackery is happening because structured errors not implemented\n                        // TODO: Fix when https://github.com/nearprotocol/nearcore/issues/1839 gets resolved\n                        if (response.error.data === 'Timeout' || errorMessage.includes('Timeout error')\n                            || errorMessage.includes('query has timed out')) {\n                            throw new errors_1.TypedError(errorMessage, 'TimeoutError');\n                        }\n                        throw new errors_1.TypedError(errorMessage, rpc_errors_1.getErrorTypeFromErrorMessage(response.error.data));\n                    }\n                }\n                // Success when response.error is not exist\n                return response;\n            }\n            catch (error) {\n                if (error.type === 'TimeoutError') {\n                    if (!process.env['NEAR_NO_LOGS']) {\n                        console.warn(`Retrying request to ${method} as it has timed out`, params);\n                    }\n                    return null;\n                }\n                throw error;\n            }\n        });\n        const { result } = response;\n        // From jsonrpc spec:\n        // result\n        //   This member is REQUIRED on success.\n        //   This member MUST NOT exist if there was an error invoking the method.\n        if (typeof result === 'undefined') {\n            throw new errors_1.TypedError(`Exceeded ${REQUEST_RETRY_NUMBER} attempts for request to ${method}.`, 'RetriesExceeded');\n        }\n        return result;\n    }\n}\nexports.JsonRpcProvider = JsonRpcProvider;\n"]},"metadata":{},"sourceType":"script"}